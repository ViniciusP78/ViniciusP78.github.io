{"version":3,"sources":["components/Overview.tsx","components/ProjectCard.tsx","projects.ts","components/Projects.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Overview","Segment","stacked","Header","as","Divider","ProjectCard","name","accent","tags","description","url","source_url","Card","style","backgroundColor","color","display","height","alignItems","flexDirection","justifyContent","textAlign","fontSize","fontFamily","Content","map","item","Label","horizontal","Description","extra","target","rel","href","Icon","projects","Projects","App","useState","activeMenu","setActiveMenu","loading","setLoading","gitData","setGitData","useEffect","axios","get","then","response","data","catch","console","log","handleMenuClick","e","Container","Grid","Column","width","Placeholder","Image","square","src","avatar_url","Meta","List","Item","icon","content","Menu","pointing","secondary","Link","to","active","onClick","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94e5fee1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { Divider, Header, Segment } from 'semantic-ui-react';\r\n\r\nconst Overview = () => {\r\n  return (\r\n    <Segment stacked>\r\n      <Header as='h1'>\r\n        Overview\r\n      </Header>\r\n      <Divider />\r\n\r\n      <Header as='h2'>\r\n      Sobre mim\r\n      </Header>\r\n      <Divider />\r\n      <p>\r\n        em construção...\r\n      </p>\r\n\r\n      <Header as='h2'>\r\n        Formação Acadêmica\r\n      </Header>\r\n      <Divider />\r\n      <Header as='h3'>Analista de Sistemas (2019 - Atualmente)</Header>\r\n      <Header as='h3'>Técnico em Informática para Internet (2016 - 2018)</Header>\r\n    </Segment>\r\n  )\r\n}\r\n\r\nexport default Overview","import React from 'react';\r\nimport { Card, Icon, Label } from 'semantic-ui-react';\r\n\r\nexport interface IProject {\r\n  name: string;\r\n  accent: string;\r\n  tags: {\r\n    name: string;\r\n    color: 'black' | \"blue\" | 'brown' | 'green' | 'grey' | 'olive' | 'orange' | 'pink' | 'purple' | 'red' | \"teal\" | 'violet' | 'yellow'\r\n  }[];\r\n  description: string;\r\n  url: string;\r\n  source_url: string\r\n\r\n}\r\n\r\nconst ProjectCard = ({name, accent, tags, description, url, source_url} : IProject) => {\r\n  return (\r\n    <Card>\r\n      <div style={{\r\n          backgroundColor: accent,\r\n          color: 'white',\r\n          display: 'flex',\r\n          height: '100px',\r\n          alignItems: 'center',\r\n          flexDirection: 'column',\r\n          justifyContent: 'center',\r\n          textAlign: 'center',\r\n          fontSize: '32px',\r\n          fontFamily: 'Ubuntu',\r\n        }}>\r\n          {name}\r\n        </div>\r\n      <Card.Content>\r\n        \r\n      <Card.Header>\r\n      {tags.map(item =><Label color={item.color} horizontal>{item.name}</Label>)}\r\n      </Card.Header>\r\n      <Card.Description>\r\n        {description}\r\n      </Card.Description>\r\n    </Card.Content>\r\n    <Card.Content extra>\r\n      <div style={{\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around'\r\n      }}>\r\n        <a target='_blank' rel=\"noreferrer\" href={url}>\r\n          <Icon name='external alternate' />\r\n          Visualizar\r\n        </a>\r\n        <a target='_blank' rel=\"noreferrer\" href={source_url}>\r\n          <Icon name='github' />\r\n          Código Fonte\r\n        </a>\r\n      </div>\r\n      \r\n    </Card.Content>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default ProjectCard","interface IProject {\r\n  name: string;\r\n  accent: string;\r\n  tags: {\r\n    name: string;\r\n    color: 'black' | \"blue\" | 'brown' | 'green' | 'grey' | 'olive' | 'orange' | 'pink' | 'purple' | 'red' | \"teal\" | 'violet' | 'yellow'\r\n  }[];\r\n  description: string;\r\n  url: string;\r\n  source_url: string\r\n\r\n}\r\n\r\nconst projects: IProject[] = [\r\n  {\r\n    \"name\": \"Notes\",\r\n    \"accent\": \"#202021\",\r\n    \"tags\": [\r\n      {\r\n        \"name\": \"React\",\r\n        \"color\": \"teal\"\r\n      },\r\n      {\r\n        \"name\": \"TypeScript\",\r\n        \"color\": \"blue\"\r\n      }\r\n    ],\r\n    \"description\": \"Um simples bloco de anotações que utiliza Markdown.\",\r\n    \"url\": \"https://viniciusp78.github.io/notes-app/\",\r\n    \"source_url\": \"https://github.com/ViniciusP78/notes-app/\"\r\n  }\r\n]\r\n\r\nexport default projects;","import React from 'react';\r\n\r\nimport {Divider, Header, Segment } from 'semantic-ui-react';\r\nimport ProjectCard from './ProjectCard';\r\n\r\nimport projects from '../projects';\r\n\r\nconst Projects = () => {\r\n\r\n  return (\r\n    <Segment stacked>\r\n      <Header as='h1'>\r\n        Projects\r\n      </Header>\r\n      <Divider />\r\n\r\n      {\r\n        \r\n        projects.map(item => <ProjectCard {...item} />)\r\n      }\r\n\r\n    </Segment>\r\n  )\r\n}\r\n\r\nexport default Projects","import React, { useEffect, useState } from 'react';\n\nimport { Container, Grid, Menu, MenuItemProps, Image, Card, Placeholder, List } from 'semantic-ui-react';\nimport { HashRouter as Router, Switch, Link, Route } from 'react-router-dom';\n\nimport axios from 'axios';\n\nimport Overview from './components/Overview';\nimport Projects from './components/Projects';\n\ninterface IGitData {\n  avatar_url: string\n}\n\nfunction App() { // Adicionar seletor de línguas\n  const [ activeMenu, setActiveMenu ] = useState<string>();\n  const [ loading, setLoading ] = useState<boolean>(true);\n  const [ gitData, setGitData ] = useState<IGitData>();\n\n  useEffect(() => {\n    axios.get('https://api.github.com/users/viniciusp78')\n      .then((response) => {\n        setGitData(response.data)\n        setLoading(false);\n      })\n      .catch((response) => {\n        console.log(response);\n      })\n  },[])\n\n\n  const handleMenuClick = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>, { name } : MenuItemProps) => {\n    setActiveMenu(name);\n  }\n\n  return (\n    <Container>\n      <Grid>\n        <Grid.Column width={4}>\n          <Card>\n          {loading ? (\n                <Placeholder>\n                  <Placeholder.Image square />\n                </Placeholder>\n              ) : (\n                <Image src={gitData?.avatar_url} />\n              )}\n          <Card.Content>\n            <Card.Header>Vinícius Pereira</Card.Header>\n            <Card.Meta>Desenvolvedor Full-Stack</Card.Meta>\n            <Card.Meta>Brasileiro</Card.Meta>\n            <Card.Meta>20 Anos</Card.Meta>\n          </Card.Content>\n          <Card.Content>\n            <List>\n              <List.Item\n                icon='github'\n                content={<a target='_blank' rel=\"noreferrer\" href='https://github.com/ViniciusP78'>Github</a>}\n              />\n              <List.Item\n                icon='linkedin'\n                content={<a target='_blank' rel=\"noreferrer\" href='https://www.linkedin.com/in/vinicius-p-44765813a/'>LinkedIn</a>}\n              />\n            </List>\n          </Card.Content>\n          </Card>\n          \n        </Grid.Column>\n\n        <Grid.Column width={12}>\n          <Router>\n            <Menu pointing secondary>\n              <Menu.Item\n                as={Link} to='/'\n                name='overview'\n                active={activeMenu === 'overview'}\n                onClick={handleMenuClick}\n              >\n                Overview\n              </Menu.Item>\n              <Menu.Item\n                as={Link} to='/projects'\n                name='projects'\n                active={activeMenu === 'projects'}\n                onClick={handleMenuClick}\n              >\n                Projects\n              </Menu.Item>\n\n              {/* <Menu.Menu position='right'>\n                <Menu.Item>\n                  <Button.Group compact basic size='mini'>\n                    <Button basic color='blue'>BR</Button>\n                    <Button>EN</Button>\n                  </Button.Group>\n                </Menu.Item>\n              </Menu.Menu> */}\n            </Menu>\n            <Switch>\n              <Route path='/projects'>\n                <Projects />\n              </Route>\n              <Route path='/'>\n                <Overview />\n              </Route>\n            </Switch>\n          </Router>\n        </Grid.Column>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}